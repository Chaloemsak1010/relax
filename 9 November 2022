using System;
public class Program
{
    public class MyArray
    {
        public static void Main(string[] args)
        {
            /* an array with 5 rows and 2 columns*/


            int[,,] arr3d3 = new int[2, 2, 3]{
                { { 1, 2, 3}, {4, 5, 6} },
                { { 7, 8, 9}, {10, 11, 12} }
            };
            //Console.WriteLine(arr3d3[1,1,1]);
            //tese build
            // 48
            //Math.pow ต้องเป็นทศนิยมเท่านั้น
            double[,,,] arr3d4 = new double[2, 4, 2, 3] {
               {
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,3 } }
               },
               {
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,3 } },
                     {{ 1,2,3 },{1,2,Math.Pow(10,2) } }   
                }

            };
            //double test = Math.Pow(10, 2);
            int r, c, d, e;
            double result=0;
            for (r = 0; r < arr3d4.GetLength(0); r++)
            {
                for (c = 0; c < arr3d4.GetLength(1); c++)
                {
                    for(d = 0; d < arr3d4.GetLength(2); d++)
                    {
                        for(e = 0; e < arr3d4.GetLength(3); e++)
                        {
                            Console.WriteLine("a[{0},{1},{2},{3}] = {4}", r, c, d, e, arr3d4[r, c, d, e]);
                            result+=arr3d4[r, c, d, e];
                        }
                    }
                }
            }
            Console.WriteLine("Summation = {0}",+result);
            //Console.WriteLine("a[{0},{1},{2},{3}] = {4}", r, c,d,e, arr3d4[r, c,d,e]);
            // Reach Number 9
            Console.WriteLine(arr3d4[1,1,1,1]);
            //Console.Write();
            /*
            int[,] a = new int[5, 2] { { 0, 0 },
                { 1, 2 },
                { 2, 4 },
                { 3, 6 },
                { 4, 8 } }
            ;
            int r, c;

            /* output each array element's value 
            for (r = 0; r < a.GetLength(0); r++)
            {
                for (c = 0; c < a.GetLength(1); c++)
                {
                    Console.WriteLine("a[{0},{1}] = {2}", r, c, a[r, c]);
                }
            }
            // what????????????
            int value = 2;
            for (int power = 0; power <= 32; power++)
                Console.WriteLine($"{value}^{power} = {(long)Math.Pow(value, power):N0} (0x{(long)Math.Pow(value, power):X})");

            // The example displays the following output:
            //     2^0 = 1 (0x1)
            //     2^1 = 2 (0x2)
            //     2^2 = 4 (0x4)
            //     2^3 = 8 (0x8)
            //     2^4 = 16 (0x10)
            //     2^5 = 32 (0x20)
            //     2^6 = 64 (0x40)
            //     2^7 = 128 (0x80)
            //     2^8 = 256 (0x100)
            //     2^9 = 512 (0x200)
            //     2^10 = 1,024 (0x400)
            //     2^11 = 2,048 (0x800)
            //     2^12 = 4,096 (0x1000)
            //     2^13 = 8,192 (0x2000)
            //     2^14 = 16,384 (0x4000)
            //     2^15 = 32,768 (0x8000)
            //     2^16 = 65,536 (0x10000)
            //     2^17 = 131,072 (0x20000)
            //     2^18 = 262,144 (0x40000)
            //     2^19 = 524,288 (0x80000)
            //     2^20 = 1,048,576 (0x100000)
            //     2^21 = 2,097,152 (0x200000)
            //     2^22 = 4,194,304 (0x400000)
            //     2^23 = 8,388,608 (0x800000)
            //     2^24 = 16,777,216 (0x1000000)
            //     2^25 = 33,554,432 (0x2000000)
            //     2^26 = 67,108,864 (0x4000000)
            //     2^27 = 134,217,728 (0x8000000)
            //     2^28 = 268,435,456 (0x10000000)
            //     2^29 = 536,870,912 (0x20000000)
            //     2^30 = 1,073,741,824 (0x40000000)
            //     2^31 = 2,147,483,648 (0x80000000)
            //     2^32 = 4,294,967,296 (0x100000000)
            */
        }
    }
}
